schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "blocks"
"""
type blocks {
  id: String!
  level: bigint!
  orphan: Boolean!
  timestamp: timestamptz!
}

"""
Boolean expression to filter rows from the table "blocks". All fields are combined with a logical 'AND'.
"""
input blocks_bool_exp {
  _and: [blocks_bool_exp!]
  _not: blocks_bool_exp
  _or: [blocks_bool_exp!]
  id: String_comparison_exp
  level: bigint_comparison_exp
  orphan: Boolean_comparison_exp
  timestamp: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "blocks"."""
input blocks_order_by {
  id: order_by
  level: order_by
  orphan: order_by
  timestamp: order_by
}

"""
select columns of table "blocks"
"""
enum blocks_select_column {
  """column name"""
  id

  """column name"""
  level

  """column name"""
  orphan

  """column name"""
  timestamp
}

"""
columns and relationships of "dipdup_contract"
"""
type dipdup_contract {
  address: String!
  created_at: timestamptz!
  name: String!
  typename: String
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_contract". All fields are combined with a logical 'AND'.
"""
input dipdup_contract_bool_exp {
  _and: [dipdup_contract_bool_exp!]
  _not: dipdup_contract_bool_exp
  _or: [dipdup_contract_bool_exp!]
  address: String_comparison_exp
  created_at: timestamptz_comparison_exp
  name: String_comparison_exp
  typename: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_contract"."""
input dipdup_contract_order_by {
  address: order_by
  created_at: order_by
  name: order_by
  typename: order_by
  updated_at: order_by
}

"""
select columns of table "dipdup_contract"
"""
enum dipdup_contract_select_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  name

  """column name"""
  typename

  """column name"""
  updated_at
}

"""
columns and relationships of "dipdup_head"
"""
type dipdup_head {
  created_at: timestamptz!
  hash: String!
  level: Int!
  name: String!
  timestamp: timestamptz!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_head". All fields are combined with a logical 'AND'.
"""
input dipdup_head_bool_exp {
  _and: [dipdup_head_bool_exp!]
  _not: dipdup_head_bool_exp
  _or: [dipdup_head_bool_exp!]
  created_at: timestamptz_comparison_exp
  hash: String_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_head"."""
input dipdup_head_order_by {
  created_at: order_by
  hash: order_by
  level: order_by
  name: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
select columns of table "dipdup_head"
"""
enum dipdup_head_select_column {
  """column name"""
  created_at

  """column name"""
  hash

  """column name"""
  level

  """column name"""
  name

  """column name"""
  timestamp

  """column name"""
  updated_at
}

"""
columns and relationships of "dipdup_index"
"""
type dipdup_index {
  config_hash: String!
  created_at: timestamptz!
  level: Int!
  name: String!

  """
  NEW: NEW\nSYNCING: SYNCING\nREALTIME: REALTIME\nROLLBACK: ROLLBACK\nONESHOT: ONESHOT
  """
  status: String!
  template: String
  template_values(
    """JSON select path"""
    path: String
  ): jsonb

  """operation: operation\nbig_map: big_map\nhead: head"""
  type: String!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_index". All fields are combined with a logical 'AND'.
"""
input dipdup_index_bool_exp {
  _and: [dipdup_index_bool_exp!]
  _not: dipdup_index_bool_exp
  _or: [dipdup_index_bool_exp!]
  config_hash: String_comparison_exp
  created_at: timestamptz_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  status: String_comparison_exp
  template: String_comparison_exp
  template_values: jsonb_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_index"."""
input dipdup_index_order_by {
  config_hash: order_by
  created_at: order_by
  level: order_by
  name: order_by
  status: order_by
  template: order_by
  template_values: order_by
  type: order_by
  updated_at: order_by
}

"""
select columns of table "dipdup_index"
"""
enum dipdup_index_select_column {
  """column name"""
  config_hash

  """column name"""
  created_at

  """column name"""
  level

  """column name"""
  name

  """column name"""
  status

  """column name"""
  template

  """column name"""
  template_values

  """column name"""
  type

  """column name"""
  updated_at
}

"""
columns and relationships of "dipdup_schema"
"""
type dipdup_schema {
  created_at: timestamptz!
  hash: String!
  name: String!

  """
  MANUAL: triggered manually from callback\nMIGRATION: applied migration requires reindexing\nROLLBACK: reorg message received and can't be processed\nCONFIG_HASH_MISMATCH: index config has been modified\nSCHEMA_HASH_MISMATCH: database schema has been modified\nBLOCK_HASH_MISMATCH: block hash mismatch, missed rollback when DipDup was stopped\nMISSING_INDEX_TEMPLATE: index template is missing, can't restore index state
  """
  reindex: String
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_schema". All fields are combined with a logical 'AND'.
"""
input dipdup_schema_bool_exp {
  _and: [dipdup_schema_bool_exp!]
  _not: dipdup_schema_bool_exp
  _or: [dipdup_schema_bool_exp!]
  created_at: timestamptz_comparison_exp
  hash: String_comparison_exp
  name: String_comparison_exp
  reindex: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_schema"."""
input dipdup_schema_order_by {
  created_at: order_by
  hash: order_by
  name: order_by
  reindex: order_by
  updated_at: order_by
}

"""
select columns of table "dipdup_schema"
"""
enum dipdup_schema_select_column {
  """column name"""
  created_at

  """column name"""
  hash

  """column name"""
  name

  """column name"""
  reindex

  """column name"""
  updated_at
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "blocks"
  """
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(id: String!): blocks

  """
  fetch data from the table: "dipdup_contract"
  """
  dipdup_contract(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_bool_exp
  ): [dipdup_contract!]!

  """fetch data from the table: "dipdup_contract" using primary key columns"""
  dipdup_contract_by_pk(name: String!): dipdup_contract

  """
  fetch data from the table: "dipdup_head"
  """
  dipdup_head(
    """distinct select on columns"""
    distinct_on: [dipdup_head_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_order_by!]

    """filter the rows returned"""
    where: dipdup_head_bool_exp
  ): [dipdup_head!]!

  """fetch data from the table: "dipdup_head" using primary key columns"""
  dipdup_head_by_pk(name: String!): dipdup_head

  """
  fetch data from the table: "dipdup_index"
  """
  dipdup_index(
    """distinct select on columns"""
    distinct_on: [dipdup_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_index_order_by!]

    """filter the rows returned"""
    where: dipdup_index_bool_exp
  ): [dipdup_index!]!

  """fetch data from the table: "dipdup_index" using primary key columns"""
  dipdup_index_by_pk(name: String!): dipdup_index

  """
  fetch data from the table: "dipdup_schema"
  """
  dipdup_schema(
    """distinct select on columns"""
    distinct_on: [dipdup_schema_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_schema_order_by!]

    """filter the rows returned"""
    where: dipdup_schema_bool_exp
  ): [dipdup_schema!]!

  """fetch data from the table: "dipdup_schema" using primary key columns"""
  dipdup_schema_by_pk(name: String!): dipdup_schema

  """
  fetch data from the table: "reorgs"
  """
  reorgs(
    """distinct select on columns"""
    distinct_on: [reorgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_order_by!]

    """filter the rows returned"""
    where: reorgs_bool_exp
  ): [reorgs!]!

  """
  fetch data from the table: "reorgs_1d"
  """
  reorgs_1d(
    """distinct select on columns"""
    distinct_on: [reorgs_1d_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1d_order_by!]

    """filter the rows returned"""
    where: reorgs_1d_bool_exp
  ): [reorgs_1d!]!

  """
  fetch data from the table: "reorgs_1d_with_gaps"
  """
  reorgs_1d_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1d_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1d_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1d_with_gaps_bool_exp
  ): [reorgs_1d_with_gaps!]!

  """
  fetch data from the table: "reorgs_1h"
  """
  reorgs_1h(
    """distinct select on columns"""
    distinct_on: [reorgs_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1h_order_by!]

    """filter the rows returned"""
    where: reorgs_1h_bool_exp
  ): [reorgs_1h!]!

  """
  fetch data from the table: "reorgs_1h_with_gaps"
  """
  reorgs_1h_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1h_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1h_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1h_with_gaps_bool_exp
  ): [reorgs_1h_with_gaps!]!

  """
  fetch data from the table: "reorgs_1w"
  """
  reorgs_1w(
    """distinct select on columns"""
    distinct_on: [reorgs_1w_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1w_order_by!]

    """filter the rows returned"""
    where: reorgs_1w_bool_exp
  ): [reorgs_1w!]!

  """
  fetch data from the table: "reorgs_1w_with_gaps"
  """
  reorgs_1w_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1w_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1w_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1w_with_gaps_bool_exp
  ): [reorgs_1w_with_gaps!]!

  """fetch data from the table: "reorgs" using primary key columns"""
  reorgs_by_pk(id: Int!, timestamp: timestamptz!): reorgs
}

"""
columns and relationships of "reorgs"
"""
type reorgs {
  from_level: bigint!
  id: Int!
  timestamp: timestamptz!
  to_level: bigint!
}

"""
columns and relationships of "reorgs_1d"
"""
type reorgs_1d {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1d". All fields are combined with a logical 'AND'.
"""
input reorgs_1d_bool_exp {
  _and: [reorgs_1d_bool_exp!]
  _not: reorgs_1d_bool_exp
  _or: [reorgs_1d_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1d"."""
input reorgs_1d_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1d"
"""
enum reorgs_1d_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
columns and relationships of "reorgs_1d_with_gaps"
"""
type reorgs_1d_with_gaps {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1d_with_gaps". All fields are combined with a logical 'AND'.
"""
input reorgs_1d_with_gaps_bool_exp {
  _and: [reorgs_1d_with_gaps_bool_exp!]
  _not: reorgs_1d_with_gaps_bool_exp
  _or: [reorgs_1d_with_gaps_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1d_with_gaps"."""
input reorgs_1d_with_gaps_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1d_with_gaps"
"""
enum reorgs_1d_with_gaps_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
columns and relationships of "reorgs_1h"
"""
type reorgs_1h {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1h". All fields are combined with a logical 'AND'.
"""
input reorgs_1h_bool_exp {
  _and: [reorgs_1h_bool_exp!]
  _not: reorgs_1h_bool_exp
  _or: [reorgs_1h_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1h"."""
input reorgs_1h_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1h"
"""
enum reorgs_1h_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
columns and relationships of "reorgs_1h_with_gaps"
"""
type reorgs_1h_with_gaps {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1h_with_gaps". All fields are combined with a logical 'AND'.
"""
input reorgs_1h_with_gaps_bool_exp {
  _and: [reorgs_1h_with_gaps_bool_exp!]
  _not: reorgs_1h_with_gaps_bool_exp
  _or: [reorgs_1h_with_gaps_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1h_with_gaps"."""
input reorgs_1h_with_gaps_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1h_with_gaps"
"""
enum reorgs_1h_with_gaps_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
columns and relationships of "reorgs_1w"
"""
type reorgs_1w {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1w". All fields are combined with a logical 'AND'.
"""
input reorgs_1w_bool_exp {
  _and: [reorgs_1w_bool_exp!]
  _not: reorgs_1w_bool_exp
  _or: [reorgs_1w_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1w"."""
input reorgs_1w_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1w"
"""
enum reorgs_1w_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
columns and relationships of "reorgs_1w_with_gaps"
"""
type reorgs_1w_with_gaps {
  bucket: timestamptz
  num_accidents: bigint
}

"""
Boolean expression to filter rows from the table "reorgs_1w_with_gaps". All fields are combined with a logical 'AND'.
"""
input reorgs_1w_with_gaps_bool_exp {
  _and: [reorgs_1w_with_gaps_bool_exp!]
  _not: reorgs_1w_with_gaps_bool_exp
  _or: [reorgs_1w_with_gaps_bool_exp!]
  bucket: timestamptz_comparison_exp
  num_accidents: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs_1w_with_gaps"."""
input reorgs_1w_with_gaps_order_by {
  bucket: order_by
  num_accidents: order_by
}

"""
select columns of table "reorgs_1w_with_gaps"
"""
enum reorgs_1w_with_gaps_select_column {
  """column name"""
  bucket

  """column name"""
  num_accidents
}

"""
Boolean expression to filter rows from the table "reorgs". All fields are combined with a logical 'AND'.
"""
input reorgs_bool_exp {
  _and: [reorgs_bool_exp!]
  _not: reorgs_bool_exp
  _or: [reorgs_bool_exp!]
  from_level: bigint_comparison_exp
  id: Int_comparison_exp
  timestamp: timestamptz_comparison_exp
  to_level: bigint_comparison_exp
}

"""Ordering options when selecting data from "reorgs"."""
input reorgs_order_by {
  from_level: order_by
  id: order_by
  timestamp: order_by
  to_level: order_by
}

"""
select columns of table "reorgs"
"""
enum reorgs_select_column {
  """column name"""
  from_level

  """column name"""
  id

  """column name"""
  timestamp

  """column name"""
  to_level
}

type subscription_root {
  """
  fetch data from the table: "blocks"
  """
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(id: String!): blocks

  """
  fetch data from the table: "dipdup_contract"
  """
  dipdup_contract(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_bool_exp
  ): [dipdup_contract!]!

  """fetch data from the table: "dipdup_contract" using primary key columns"""
  dipdup_contract_by_pk(name: String!): dipdup_contract

  """
  fetch data from the table: "dipdup_head"
  """
  dipdup_head(
    """distinct select on columns"""
    distinct_on: [dipdup_head_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_order_by!]

    """filter the rows returned"""
    where: dipdup_head_bool_exp
  ): [dipdup_head!]!

  """fetch data from the table: "dipdup_head" using primary key columns"""
  dipdup_head_by_pk(name: String!): dipdup_head

  """
  fetch data from the table: "dipdup_index"
  """
  dipdup_index(
    """distinct select on columns"""
    distinct_on: [dipdup_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_index_order_by!]

    """filter the rows returned"""
    where: dipdup_index_bool_exp
  ): [dipdup_index!]!

  """fetch data from the table: "dipdup_index" using primary key columns"""
  dipdup_index_by_pk(name: String!): dipdup_index

  """
  fetch data from the table: "dipdup_schema"
  """
  dipdup_schema(
    """distinct select on columns"""
    distinct_on: [dipdup_schema_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_schema_order_by!]

    """filter the rows returned"""
    where: dipdup_schema_bool_exp
  ): [dipdup_schema!]!

  """fetch data from the table: "dipdup_schema" using primary key columns"""
  dipdup_schema_by_pk(name: String!): dipdup_schema

  """
  fetch data from the table: "reorgs"
  """
  reorgs(
    """distinct select on columns"""
    distinct_on: [reorgs_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_order_by!]

    """filter the rows returned"""
    where: reorgs_bool_exp
  ): [reorgs!]!

  """
  fetch data from the table: "reorgs_1d"
  """
  reorgs_1d(
    """distinct select on columns"""
    distinct_on: [reorgs_1d_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1d_order_by!]

    """filter the rows returned"""
    where: reorgs_1d_bool_exp
  ): [reorgs_1d!]!

  """
  fetch data from the table: "reorgs_1d_with_gaps"
  """
  reorgs_1d_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1d_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1d_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1d_with_gaps_bool_exp
  ): [reorgs_1d_with_gaps!]!

  """
  fetch data from the table: "reorgs_1h"
  """
  reorgs_1h(
    """distinct select on columns"""
    distinct_on: [reorgs_1h_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1h_order_by!]

    """filter the rows returned"""
    where: reorgs_1h_bool_exp
  ): [reorgs_1h!]!

  """
  fetch data from the table: "reorgs_1h_with_gaps"
  """
  reorgs_1h_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1h_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1h_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1h_with_gaps_bool_exp
  ): [reorgs_1h_with_gaps!]!

  """
  fetch data from the table: "reorgs_1w"
  """
  reorgs_1w(
    """distinct select on columns"""
    distinct_on: [reorgs_1w_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1w_order_by!]

    """filter the rows returned"""
    where: reorgs_1w_bool_exp
  ): [reorgs_1w!]!

  """
  fetch data from the table: "reorgs_1w_with_gaps"
  """
  reorgs_1w_with_gaps(
    """distinct select on columns"""
    distinct_on: [reorgs_1w_with_gaps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reorgs_1w_with_gaps_order_by!]

    """filter the rows returned"""
    where: reorgs_1w_with_gaps_bool_exp
  ): [reorgs_1w_with_gaps!]!

  """fetch data from the table: "reorgs" using primary key columns"""
  reorgs_by_pk(id: Int!, timestamp: timestamptz!): reorgs
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
